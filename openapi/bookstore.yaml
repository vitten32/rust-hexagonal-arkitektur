openapi: 3.0.0
info:
  title: Books API
  description: API for managing books
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve a list of all books in the library.
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      description: Add a new book to the library.
      requestBody:
        description: Book to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{bookId}:
    get:
      summary: Get a book by ID
      description: Retrieve a book by its ID.
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A single book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      description: Update the details of a book by its ID.
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to update
          schema:
            type: string
      requestBody:
        description: Book details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book by ID
      description: Delete a book from the library by its ID.
      parameters:
        - name: bookId
          in: path
          required: true
          description: ID of the book to delete
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found

components:
  schemas:
    Book:
      type: object
      required:
        - id
        - title
        - author
      properties:
        id:
          type: string
          example: '123'
          description: Unique identifier for the book
        title:
          type: string
          example: 'The Great Gatsby'
          description: Title of the book
        author:
          type: string
          example: 'F. Scott Fitzgerald'
          description: Author of the book
        publishedDate:
          type: string
          format: date
          example: '1925-04-10'
          description: Date when the book was published
        isbn:
          type: string
          example: '978-3-16-148410-0'
          description: ISBN number of the book
